#!/usr/bin/env python3
import datetime
from pathlib import Path

VERSIONS_FILE = (
        Path(__file__).absolute().parent.parent / "list-versions" / "version_date.tsv"
)

HEADER = """<!--
the file is autogenerated by utils/security-generator/generate_altinity_security.py
-->

# Altinity Security Policy

## Security Announcements
Security fixes will be announced by posting them in the [security changelog](https://clickhouse.com/docs/en/whats-new/security-changelog/).

## Scope and Supported Versions

The following versions of Altinity Stable Builds are currently being supported with security updates:
"""

FOOTER = """## Reporting a Vulnerability

We're extremely grateful for security researchers and users that report vulnerabilities to the ClickHouse Open Source Community. All reports are thoroughly investigated by developers.

To report a potential vulnerability in ClickHouse please send the details about it to [security@clickhouse.com](mailto:security@clickhouse.com). We do not offer any financial rewards for reporting issues to us using this method. Alternatively, you can also submit your findings through our public bug bounty program hosted by [Bugcrowd](https://bugcrowd.com/clickhouse) and be rewarded for it as per the program scope and rules of engagement.

### When Should I Report a Vulnerability?

- You think you discovered a potential security vulnerability in ClickHouse
- You are unsure how a vulnerability affects ClickHouse

### When Should I NOT Report a Vulnerability?

- You need help tuning ClickHouse components for security
- You need help applying security related updates
- Your issue is not security related

## Security Vulnerability Response

Each report is acknowledged and analyzed by ClickHouse maintainers within 5 working days.
As the security issue moves from triage, to identified fix, to release planning we will keep the reporter updated.

## Public Disclosure Timing

A public disclosure date is negotiated by the ClickHouse maintainers and the bug submitter. We prefer to fully disclose the bug as soon as possible once a user mitigation is available. It is reasonable to delay disclosure when the bug or the fix is not yet fully understood, the solution is not well-tested, or for vendor coordination. The timeframe for disclosure is from immediate (especially if it's already publicly known) to 90 days. For a vulnerability with a straightforward mitigation, we expect the report date to disclosure date to be on the order of 7 days.
"""

def parse_line(line):
    parts = line.split()
    productName = parts[0]
    lastRelease = parts[1]
    endOfSupport = parts[2]

    sections = productName.split('.')
    majorVersion = "<span style=\"font-size: large; font-weight: bold;\">" + '.'.join(sections[:2]) + "</span>"
    productName = ("<span style=\"font-size: large; font-weight: bold;\">" +
                   '.'.join(sections[:2]) + "</span>." + '.'.join(sections[2:]))
    return productName, lastRelease, endOfSupport

def check_support(end_date_str):
    today = datetime.date.today()
    end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()
    return '✅' if end_date >= today else '❌'

def generate_support_table(file_path):
    # Open the file for reading
    with open(file_path, 'r') as file:
        # Read all lines from the file
        lines = file.readlines()

        # Print the header for the Markdown table
        print("| Altinity Stable Build release | Last update | Supported? |")
        print("|-------------------------------|-------------|:----------:|")

        # Iterate through each line in the file
        for line in lines:
            # Ignore blank lines or lines that start with #
            if line.strip() == "" or line.strip().startswith('#'):
                continue
            # Split the line into parts based on tab character

            productName, lastRelease, endOfSupport = parse_line(line)
            support_status = check_support(endOfSupport)
            print(f"| {productName} | {lastRelease} | {support_status} |")

def main() -> None:
    print(HEADER)
    generate_support_table(VERSIONS_FILE)
    print(FOOTER)

if __name__ == "__main__":
    main()
