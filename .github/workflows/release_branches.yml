name: ReleaseBranchCI

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1

on: # yamllint disable-line rule:truthy
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      - '**/22.3*'
  release:
    types:
      - published
  # push:
  #   branches:
  #     # Anything/22.3 (e.g customizations/22.3)
  #     - '**/22.3*'

jobs:
  DockerHubPushAarch64:
    runs-on: [self-hosted, style-checker-aarch64]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_images_check.py --suffix aarch64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: changed_images_aarch64
          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
  DockerHubPushAmd64:
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_images_check.py --suffix amd64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: changed_images_amd64
          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
  DockerHubPush:
    needs: [DockerHubPushAarch64, DockerHubPushAmd64]
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Download changed aarch64 images
        uses: actions/download-artifact@v2
        with:
          name: changed_images_aarch64
          path: ${{ runner.temp }}
      - name: Download changed amd64 images
        uses: actions/download-artifact@v2
        with:
          name: changed_images_amd64
          path: ${{ runner.temp }}
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: changed_images
          path: ${{ runner.temp }}/changed_images.json
  CompatibilityCheck:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: CompatibilityCheck
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  #########################################################################################
  #################################### ORDINARY BUILDS ####################################
  #########################################################################################
  BuilderDebRelease:
    needs: [DockerHubPush]
    runs-on: [self-hosted, builder]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          CHECK_NAME=ClickHouse build check (actions)
          BUILD_NAME=package_release
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v2
        with:
          name: changed_images
          path: ${{ env.IMAGES_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          git -C "$GITHUB_WORKSPACE" submodule sync
          git -C "$GITHUB_WORKSPACE" submodule update --depth=1 --init --jobs=10
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$CHECK_NAME" "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ env.TEMP_PATH }}/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"

  ############################################################################################
  ##################################### Docker images  #######################################
  ############################################################################################
#  DockerServerImages:
#    needs:
#      - BuilderDebRelease
#      # - BuilderDebAarch64 - currently we do not build aarch images
#    runs-on: [self-hosted, style-checker]
#    steps:
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
#      - name: Check docker clickhouse/clickhouse-server building
#        run: |
#          cd "$GITHUB_WORKSPACE/tests/ci"
#          python3 docker_server.py --release-type head --no-push
#          python3 docker_server.py --release-type head --no-push --no-ubuntu \
#            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  ############################################################################################
#  ##################################### BUILD REPORTER #######################################
#  ############################################################################################
#  BuilderReport:
#    needs:
#      - BuilderDebRelease
#    runs-on: [self-hosted, style-checker]
#    if: ${{ success() || failure() }}
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          CHECK_NAME=ClickHouse build check (actions)
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          TEMP_PATH=${{runner.temp}}/report_check
#          NEEDS_DATA_PATH=${{runner.temp}}/needs.json
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Report Builder
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cat > "$NEEDS_DATA_PATH" << 'EOF'
#          ${{ toJSON(needs) }}
#          EOF
#          cd "$GITHUB_WORKSPACE/tests/ci"
#          python3 build_report_check.py "$CHECK_NAME"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  MarkReleaseReady:
#    needs:
#      - BuilderDebRelease
#      # - BuilderDebAarch64
#    runs-on: [self-hosted, style-checker]
#    steps:
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Mark Commit Release Ready
#        run: |
#          cd "$GITHUB_WORKSPACE/tests/ci"
#          python3 mark_release_ready.py
#  ##############################################################################################
#  ########################### FUNCTIONAl STATELESS TESTS #######################################
#  ##############################################################################################
#  FunctionalStatelessTestRelease:
#    needs: [BuilderDebRelease]
#    runs-on: [self-hosted, func-tester]
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          TEMP_PATH=${{runner.temp}}/stateless_debug
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          CHECK_NAME=Stateless tests (release, actions)
#          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
#          KILL_TIMEOUT=10800
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Functional test
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#          cd "$REPO_COPY/tests/ci"
#          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  ##############################################################################################
#  ############################ FUNCTIONAl STATEFUL TESTS #######################################
#  ##############################################################################################
#  FunctionalStatefulTestRelease:
#    needs: [BuilderDebRelease]
#    runs-on: [self-hosted, func-tester]
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          TEMP_PATH=${{runner.temp}}/stateful_debug
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          CHECK_NAME=Stateful tests (release, actions)
#          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
#          KILL_TIMEOUT=3600
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Functional test
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#          cd "$REPO_COPY/tests/ci"
#          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  #############################################################################################
#  ############################# INTEGRATION TESTS #############################################
#  #############################################################################################
#  IntegrationTestsRelease0:
#    needs: [BuilderDebRelease]
#    runs-on: [self-hosted, stress-tester]
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          TEMP_PATH=${{runner.temp}}/integration_tests_release
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          CHECK_NAME=Integration tests (release, actions)
#          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
#          RUN_BY_HASH_NUM=0
#          RUN_BY_HASH_TOTAL=2
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Integration test
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#          cd "$REPO_COPY/tests/ci"
#          python3 integration_test_check.py "$CHECK_NAME"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  IntegrationTestsRelease1:
#    needs: [BuilderDebRelease]
#    runs-on: [self-hosted, stress-tester]
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          TEMP_PATH=${{runner.temp}}/integration_tests_release
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          CHECK_NAME=Integration tests (release, actions)
#          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
#          RUN_BY_HASH_NUM=1
#          RUN_BY_HASH_TOTAL=2
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Integration test
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#          cd "$REPO_COPY/tests/ci"
#          python3 integration_test_check.py "$CHECK_NAME"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
#  #############################################################################################
#  ############################### TESTFLOWS TESTS #############################################
#  #############################################################################################
#  TestFlowsTestsRelease:
#    needs: [BuilderDebRelease]
#    runs-on: [self-hosted, stress-tester]
#    steps:
#      - name: Set envs
#        run: |
#          cat >> "$GITHUB_ENV" << 'EOF'
#          TEMP_PATH=${{runner.temp}}/testflows_tests_release
#          REPORTS_PATH=${{runner.temp}}/reports_dir
#          CHECK_NAME=TestFlows tests (release, actions)
#          REPO_COPY=${{runner.temp}}/testflows_tests_release/ClickHouse
#          EOF
#      - name: Download json reports
#        uses: actions/download-artifact@v2
#        with:
#          path: ${{ env.REPORTS_PATH }}
#      - name: Clear repository
#        run: |
#          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: TestFlows test
#        run: |
#          sudo rm -fr "$TEMP_PATH"
#          mkdir -p "$TEMP_PATH"
#          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
#          cd "$REPO_COPY/tests/ci"
#          python3 testflows_test_check.py "$CHECK_NAME"
#      - name: Cleanup
#        if: always()
#        run: |
#          # shellcheck disable=SC2046
#          docker kill $(docker ps -q) ||:
#          # shellcheck disable=SC2046
#          docker rm -f $(docker ps -a -q) ||:
#          sudo rm -fr "$TEMP_PATH"
  SignRelease:
    needs: [BuilderDebRelease]
    runs-on: [ self-hosted ]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Sign release
        env:
          GPG_BINARY_SIGNING_KEY: ${{ secrets.GPG_BINARY_SIGNING_KEY }}
          GPG_BINARY_SIGNING_PASSPHRASE: ${{ secrets.GPG_BINARY_SIGNING_PASSPHRASE }}
          REPORTS_PATH: ${{ env.REPORTS_PATH }}
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 sign_release.py
      - name: Upload signed hashes
        uses: actions/upload-artifact@v2
        with:
          name: signed-hashes
          path: '/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/tests/ci/tmp/packages/*.gpg'
#          path: ${{ runner.temp }}/*.gpg
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ###########################################################################################
  ################################ FINISH CHECK #############################################
  ###########################################################################################
  FinishCheck:
    needs:
      - DockerHubPush
#      - DockerServerImages
#      - BuilderReport
#      - MarkReleaseReady
#      - FunctionalStatelessTestRelease
#      - FunctionalStatefulTestRelease
#      - IntegrationTestsRelease0
#      - IntegrationTestsRelease1
#      - TestFlowsTestsRelease
      - SignRelease
      - CompatibilityCheck
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Finish label
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 finish_check.py
