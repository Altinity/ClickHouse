name: ReleaseBranchCI

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1

on: # yamllint disable-line rule:truthy
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      # Anything/22.8 (e.g customizations/22.8)
      - '**/22.8*'
  release:
    types:
      - published
      - prereleased
  push:
    branches:
      - 'releases/22.8**'

jobs:
  # DockerHubPushAarch64:
  #   runs-on: [self-hosted, style-checker-aarch64]
  #   steps:
  #     - name: Clear repository
  #       run: |
  #         sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Images check
  #       run: |
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 docker_images_check.py --suffix aarch64
  #     - name: Upload images files to artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: changed_images_aarch64
  #         path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
  # Former DockerHubPushAmd64
  DockerHubPush:
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_images_check.py --suffix amd64
      # TODO(vnemkov): remove this step if you uncomment DockerHubPushAarch64 and DockerHubPush below.
      # The rest of the pipeline expects changed_images.json, which was generated by previous version of DockerHubPush.
      - name: Rename artifact
        run: |
          mv ${{ runner.temp }}/docker_images_check/changed_images_amd64.json ${{ runner.temp }}/docker_images_check/changed_images.json
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: changed_images
          path: ${{ runner.temp }}/docker_images_check/changed_images.json
  # DockerHubPush:
  #   needs: [DockerHubPushAmd64, DockerHubPushAarch64]
  #   runs-on: [self-hosted, style-checker]
  #   steps:
  #     - name: Clear repository
  #       run: |
  #         sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Download changed aarch64 images
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: changed_images_aarch64
  #         path: ${{ runner.temp }}
  #     - name: Download changed amd64 images
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: changed_images_amd64
  #         path: ${{ runner.temp }}
  #     - name: Images check
  #       run: |
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
  #     - name: Upload images files to artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: changed_images
  #         path: ${{ runner.temp }}/changed_images.json
  CompatibilityCheck:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: CompatibilityCheck
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
#########################################################################################
#################################### ORDINARY BUILDS ####################################
#########################################################################################
  BuilderDebRelease:
    needs: [DockerHubPush]
    runs-on: [self-hosted, builder]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_release
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v2
        with:
          name: changed_images
          path: ${{ env.IMAGES_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          git -C "$GITHUB_WORKSPACE" submodule sync
          git -C "$GITHUB_WORKSPACE" submodule update --single-branch --depth=1 --init --jobs=10
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ env.TEMP_PATH }}/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  # BuilderDebAarch64:
  #   needs: [DockerHubPush]
  #   runs-on: [self-hosted, builder]
  #   steps:
  #     - name: Set envs
  #       run: |
  #         cat >> "$GITHUB_ENV" << 'EOF'
  #         TEMP_PATH=${{runner.temp}}/build_check
  #         IMAGES_PATH=${{runner.temp}}/images_path
  #         REPO_COPY=${{runner.temp}}/build_check/ClickHouse
  #         CACHES_PATH=${{runner.temp}}/../ccaches
  #         BUILD_NAME=package_aarch64
  #         EOF
  #     - name: Download changed images
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: changed_images
  #         path: ${{ runner.temp }}/images_path
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # otherwise we will have no info about contributors
  #     - name: Build
  #       run: |
  #         git -C "$GITHUB_WORKSPACE" submodule sync
  #         git -C "$GITHUB_WORKSPACE" submodule update --depth=1 --recursive --init --jobs=10
  #         sudo rm -fr "$TEMP_PATH"
  #         mkdir -p "$TEMP_PATH"
  #         cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
  #         cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
  #     - name: Upload build URLs to artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ env.BUILD_URLS }}
  #         path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         # shellcheck disable=SC2046
  #         docker kill $(docker ps -q) ||:
  #         # shellcheck disable=SC2046
  #         docker rm -f $(docker ps -a -q) ||:
  #         sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
############################################################################################
##################################### Docker images  #######################################
############################################################################################
  DockerServerImages:
    needs:
      - BuilderDebRelease
      # - BuilderDebAarch64
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
      - name: Check docker clickhouse/clickhouse-server building
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_server.py --release-type head --no-push
          python3 docker_server.py --release-type head --no-push --no-ubuntu \
            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
############################################################################################
##################################### BUILD REPORTER #######################################
############################################################################################
  BuilderReport:
    needs:
      - BuilderDebRelease
      # - BuilderDebAarch64
    runs-on: [self-hosted, style-checker]
    if: ${{ success() || failure() }}
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          CHECK_NAME=ClickHouse build check
          REPORTS_PATH=${{runner.temp}}/reports_dir
          REPORTS_PATH=${{runner.temp}}/reports_dir
          TEMP_PATH=${{runner.temp}}/report_check
          NEEDS_DATA_PATH=${{runner.temp}}/needs.json
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Report Builder
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cat > "$NEEDS_DATA_PATH" << 'EOF'
          ${{ toJSON(needs) }}
          EOF
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 build_report_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  # BuilderSpecialReport:
  #   needs:
  #     # - BuilderBinDarwin
  #     - BuilderBinDarwinAarch64
  #   runs-on: [self-hosted, style-checker]
  #   if: ${{ success() || failure() }}
  #   steps:
  #     - name: Set envs
  #       run: |
  #         cat >> "$GITHUB_ENV" << 'EOF'
  #         TEMP_PATH=${{runner.temp}}/report_check
  #         REPORTS_PATH=${{runner.temp}}/reports_dir
  #         CHECK_NAME=ClickHouse special build check
  #         NEEDS_DATA_PATH=${{runner.temp}}/needs.json
  #         EOF
  #     - name: Download json reports
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: ${{ env.REPORTS_PATH }}
  #     - name: Clear repository
  #       run: |
  #         sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Report Builder
  #       run: |
  #         sudo rm -fr "$TEMP_PATH"
  #         mkdir -p "$TEMP_PATH"
  #         cat > "$NEEDS_DATA_PATH" << 'EOF'
  #         ${{ toJSON(needs) }}
  #         EOF
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 build_report_check.py "$CHECK_NAME"
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         # shellcheck disable=SC2046
  #         docker kill $(docker ps -q) ||:
  #         # shellcheck disable=SC2046
  #         docker rm -f $(docker ps -a -q) ||:
  #         sudo rm -fr "$TEMP_PATH"
  MarkReleaseReady:
    needs:
  #    - BuilderBinDarwin
  #    - BuilderBinDarwinAarch64
      - BuilderDebRelease
  #    - BuilderDebAarch64
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Mark Commit Release Ready
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 mark_release_ready.py
##############################################################################################
########################### FUNCTIONAl STATELESS TESTS #######################################
##############################################################################################
  FunctionalStatelessTestRelease:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  # FunctionalStatelessTestAarch64:
  #   needs: [BuilderDebAarch64]
  #   runs-on: [self-hosted, func-tester-aarch64]
  #   steps:
  #     - name: Set envs
  #       run: |
  #         cat >> "$GITHUB_ENV" << 'EOF'
  #         TEMP_PATH=${{runner.temp}}/stateless_release
  #         REPORTS_PATH=${{runner.temp}}/reports_dir
  #         CHECK_NAME=Stateless tests (aarch64)
  #         REPO_COPY=${{runner.temp}}/stateless_release/ClickHouse
  #         KILL_TIMEOUT=10800
  #         EOF
  #     - name: Download json reports
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: ${{ env.REPORTS_PATH }}
  #     - name: Clear repository
  #       run: |
  #         sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Functional test
  #       run: |
  #         sudo rm -fr "$TEMP_PATH"
  #         mkdir -p "$TEMP_PATH"
  #         cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
  #         cd "$REPO_COPY/tests/ci"
  #         python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         # shellcheck disable=SC2046
  #         docker kill $(docker ps -q) ||:
  #         # shellcheck disable=SC2046
  #         docker rm -f $(docker ps -a -q) ||:
  #         sudo rm -fr "$TEMP_PATH"
##############################################################################################
############################ FUNCTIONAl STATEFUL TESTS #######################################
##############################################################################################
  FunctionalStatefulTestRelease:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, func-tester]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (release)
          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  # FunctionalStatefulTestAarch64:
  #   needs: [BuilderDebAarch64]
  #   runs-on: [self-hosted, func-tester-aarch64]
  #   steps:
  #     - name: Set envs
  #       run: |
  #         cat >> "$GITHUB_ENV" << 'EOF'
  #         TEMP_PATH=${{runner.temp}}/stateful_release
  #         REPORTS_PATH=${{runner.temp}}/reports_dir
  #         CHECK_NAME=Stateful tests (aarch64)
  #         REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
  #         KILL_TIMEOUT=3600
  #         EOF
  #     - name: Download json reports
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: ${{ env.REPORTS_PATH }}
  #     - name: Clear repository
  #       run: |
  #         sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Functional test
  #       run: |
  #         sudo rm -fr "$TEMP_PATH"
  #         mkdir -p "$TEMP_PATH"
  #         cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
  #         cd "$REPO_COPY/tests/ci"
  #         python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         # shellcheck disable=SC2046
  #         docker kill $(docker ps -q) ||:
  #         # shellcheck disable=SC2046
  #         docker rm -f $(docker ps -a -q) ||:
  #         sudo rm -fr "$TEMP_PATH"
#############################################################################################
############################# INTEGRATION TESTS #############################################
#############################################################################################
  IntegrationTestsRelease0:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, stress-tester]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease1:
    needs: [BuilderDebRelease]
    runs-on: [self-hosted, stress-tester]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          # shellcheck disable=SC2046
          docker kill $(docker ps -q) ||:
          # shellcheck disable=SC2046
          docker rm -f $(docker ps -a -q) ||:
          sudo rm -fr "$TEMP_PATH"
  FinishCheck:
    needs:
      - DockerHubPush
      - DockerServerImages
      - BuilderReport
      # - BuilderSpecialReport
      - MarkReleaseReady
      - FunctionalStatelessTestRelease
      # - FunctionalStatelessTestAarch64
      - FunctionalStatefulTestRelease
      # - FunctionalStatefulTestAarch64
      - IntegrationTestsRelease0
      - IntegrationTestsRelease1
      - CompatibilityCheck
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Finish label
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 finish_check.py
