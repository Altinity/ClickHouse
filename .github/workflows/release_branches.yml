name: ReleaseBranchCI

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REGRESSION_RESULTS_URL: altinity-build-artifacts/${{github.event.number}}/$GITHUB_SHA
  REGRESSION_ARM_COMMIT: 19e8624c5e4ccc65b128d27b19836c0570e53991


on: # yamllint disable-line rule:truthy
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      # Anything/23.3 (e.g customizations/23.3)
      - '**/23.3*'
  release:
    types:
      - published
      - prereleased
  push:
    branches:
      - 'releases/23.3**'

jobs:
  DockerHubPushAarch64:
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_images_check.py --suffix aarch64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: changed_images_aarch64
          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
  DockerHubPushAmd64:
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_images_check.py --suffix amd64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: changed_images_amd64
          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
  DockerHubPush:
    needs: [DockerHubPushAmd64, DockerHubPushAarch64]
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Download changed aarch64 images
        uses: actions/download-artifact@v3
        with:
          name: changed_images_aarch64
          path: ${{ runner.temp }}
      - name: Download changed amd64 images
        uses: actions/download-artifact@v3
        with:
          name: changed_images_amd64
          path: ${{ runner.temp }}
      - name: Images check
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
      - name: Upload images files to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/changed_images.json
  CompatibilityCheckX86:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: CompatibilityCheckX86
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  CompatibilityCheckAarch64:
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/compatibility_check
          REPO_COPY=${{runner.temp}}/compatibility_check/ClickHouse
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: CompatibilityCheckAarch64
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#########################################################################################
#################################### ORDINARY BUILDS ####################################
#########################################################################################
  BuilderDebRelease:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_release
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ env.IMAGES_PATH }}
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH/build_check/package_release"
          cd .. && tar czf $TEMP_PATH/build_source.src.tar.gz ClickHouse/
          cd $TEMP_PATH && tar xzf $TEMP_PATH/build_source.src.tar.gz
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ env.TEMP_PATH }}/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebAarch64:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_aarch64
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebAsan:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_asan
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebUBsan:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_ubsan
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebTsan:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_tsan
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebMsan:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_msan
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
  BuilderDebDebug:
    needs: [DockerHubPush]
    runs-on: [altinity-self-hosted, builder, on-demand, type-ccx53, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/build_check
          IMAGES_PATH=${{runner.temp}}/images_path
          REPO_COPY=${{runner.temp}}/build_check/ClickHouse
          CACHES_PATH=${{runner.temp}}/../ccaches
          BUILD_NAME=package_debug
          CLICKHOUSE_STABLE_VERSION_SUFFIX=altinitystable
          EOF
      - name: Download changed images
        uses: actions/download-artifact@v3
        with:
          name: changed_images
          path: ${{ runner.temp }}/images_path
      - name: Trust My Directory
        run: git config --global --add safe.directory * # https://stackoverflow.com/a/71940133
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          submodules: true
          fetch-depth: 0 # otherwise we will have no info about contributors
      - name: Build
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
      - name: Upload build URLs to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_URLS }}
          path: ${{ runner.temp }}/build_check/${{ env.BUILD_URLS }}.json
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH" "$CACHES_PATH"
############################################################################################
##################################### Docker images  #######################################
############################################################################################
  DockerServerImages:
    needs:
      - BuilderDebRelease
      - BuilderDebAarch64
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
      - name: Check docker altinityinfra/clickhouse-server building
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 docker_server.py --release-type head --no-push \
            --image-repo altinityinfra/clickhouse-server --image-path docker/server
          python3 docker_server.py --release-type head --no-push \
            --image-repo altinityinfra/clickhouse-keeper --image-path docker/keeper
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
############################################################################################
##################################### BUILD REPORTER #######################################
############################################################################################
  BuilderReport:
    needs:
      - BuilderDebRelease
      - BuilderDebAarch64
      - BuilderDebAsan
      - BuilderDebTsan
      - BuilderDebUBsan
      - BuilderDebMsan
      - BuilderDebDebug
    runs-on: [altinity-self-hosted, build-report, on-demand, type-cpx31, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    if: ${{ success() || failure() }}
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          CHECK_NAME=ClickHouse build check
          REPORTS_PATH=${{runner.temp}}/reports_dir
          REPORTS_PATH=${{runner.temp}}/reports_dir
          TEMP_PATH=${{runner.temp}}/report_check
          NEEDS_DATA_PATH=${{runner.temp}}/needs.json
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Report Builder
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cat > "$NEEDS_DATA_PATH" << 'EOF'
          ${{ toJSON(needs) }}
          EOF
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 build_report_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  MarkReleaseReady:
    needs:
      - BuilderDebRelease
      - BuilderDebAarch64
    runs-on: [altinity-self-hosted, build-report, on-demand, type-cpx31, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Mark Commit Release Ready
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 mark_release_ready.py
############################################################################################
#################################### INSTALL PACKAGES ######################################
############################################################################################
  InstallPackagesTestRelease:
    needs: [SignRelease]
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/test_install
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Install packages (amd64)
          REPO_COPY=${{runner.temp}}/test_install/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Test packages installation
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 install_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  InstallPackagesTestAarch64:
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, style-checker, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/test_install
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Install packages (arm64)
          REPO_COPY=${{runner.temp}}/test_install/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Test packages installation
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 install_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ##############################################################################################
  ########################### FUNCTIONAl STATELESS TESTS #######################################
  ##############################################################################################
  FunctionalStatelessTestRelease:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release)
          REPO_COPY=${{runner.temp}}/stateless_release/ClickHouse
          KILL_TIMEOUT=10800
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseDatabaseReplicated0:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_database_replicated
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, DatabaseReplicated)
          REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseDatabaseReplicated1:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_database_replicated
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, DatabaseReplicated)
          REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseDatabaseReplicated2:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_database_replicated
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, DatabaseReplicated)
          REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseDatabaseReplicated3:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_database_replicated
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, DatabaseReplicated)
          REPO_COPY=${{runner.temp}}/stateless_database_replicated/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseWideParts:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_wide_parts
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, wide parts enabled)
          REPO_COPY=${{runner.temp}}/stateless_wide_parts/ClickHouse
          KILL_TIMEOUT=10800
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseS3_0:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestReleaseS3_1:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (release, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug0:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug1:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug2:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug3:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug4:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Debug5:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=5
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Tsan0:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Tsan1:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Tsan2:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Tsan3:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestS3Tsan4:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_s3_storage_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan, s3 storage)
          REPO_COPY=${{runner.temp}}/stateless_s3_storage_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestAarch64:
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (aarch64)
          REPO_COPY=${{runner.temp}}/stateless_release/ClickHouse
          KILL_TIMEOUT=10800
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestAsan0:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (asan)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestAsan1:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (asan)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestAsan2:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (asan)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestAsan3:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (asan)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestTsan0:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan)
          REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestTsan1:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan)
          REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestTsan2:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan)
          REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestTsan3:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan)
          REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestTsan4:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (tsan)
          REPO_COPY=${{runner.temp}}/stateless_tsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestUBsan0:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (ubsan)
          REPO_COPY=${{runner.temp}}/stateless_ubsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestUBsan1:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (ubsan)
          REPO_COPY=${{runner.temp}}/stateless_ubsan/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=2
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan0:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan1:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan2:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan3:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan4:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestMsan5:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (msan)
          REPO_COPY=${{runner.temp}}/stateless_memory/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=5
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestDebug0:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestDebug1:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestDebug2:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestDebug3:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestDebug4:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests (debug)
          REPO_COPY=${{runner.temp}}/stateless_debug/ClickHouse
          KILL_TIMEOUT=10800
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=5
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatelessTestFlakyCheck:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateless_flaky_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateless tests flaky check (asan)
          REPO_COPY=${{runner.temp}}/stateless_flaky_asan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
##############################################################################################
############################ FUNCTIONAl STATEFUL TESTS #######################################
##############################################################################################
  FunctionalStatefulTestRelease:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (release)
          REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestAarch64:
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, on-demand, type-cax41, in-fns1, image-arm-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (aarch64)
          REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestAsan:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (asan)
          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestTsan:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (tsan)
          REPO_COPY=${{runner.temp}}/stateful_tsan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestMsan:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_msan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (msan)
          REPO_COPY=${{runner.temp}}/stateful_msan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestUBsan:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (ubsan)
          REPO_COPY=${{runner.temp}}/stateful_ubsan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestDebug:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (debug)
          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  # Parallel replicas
  FunctionalStatefulTestDebugParallelReplicas:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (debug, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestUBsanParallelReplicas:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (ubsan, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_ubsan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestMsanParallelReplicas:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_msan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (msan, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_msan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestTsanParallelReplicas:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (tsan, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_tsan/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestAsanParallelReplicas:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (asan, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_debug/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  FunctionalStatefulTestReleaseParallelReplicas:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Setup
        run: |
          sudo touch /etc/docker/daemon.json
          sudo chown ubuntu:ubuntu /etc/docker/daemon.json
          sudo cat <<EOT > /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:3984:3989::/64"
            }
          EOT
          sudo chown root:root /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stateful_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stateful tests (release, ParallelReplicas)
          REPO_COPY=${{runner.temp}}/stateful_release/ClickHouse
          KILL_TIMEOUT=3600
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Functional test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
##############################################################################################
######################################### STRESS TESTS #######################################
##############################################################################################
  StressTestAsan:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_thread
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (asan)
          REPO_COPY=${{runner.temp}}/stress_thread/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  StressTestTsan:
    needs: [BuilderDebTsan]
    # func testers have 16 cores + 128 GB memory
    # while stress testers have 36 cores + 72 memory
    # It would be better to have something like 32 + 128,
    # but such servers almost unavailable as spot instances.
    runs-on: [altinity-self-hosted, func-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_thread
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (tsan)
          REPO_COPY=${{runner.temp}}/stress_thread/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  StressTestMsan:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (msan)
          REPO_COPY=${{runner.temp}}/stress_memory/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  StressTestUBsan:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_undefined
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (ubsan)
          REPO_COPY=${{runner.temp}}/stress_undefined/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  StressTestDebug:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/stress_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Stress test (debug)
          REPO_COPY=${{runner.temp}}/stress_debug/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Stress test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 stress_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ##############################################################################################
  ######################################### UPGRADE CHECK ######################################
  ##############################################################################################
  UpgradeCheckAsan:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/upgrade_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Upgrade check (asan)
          REPO_COPY=${{runner.temp}}/upgrade_asan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Upgrade check
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 upgrade_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UpgradeCheckTsan:
    needs: [BuilderDebTsan]
    # same as for stress test with tsan
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/upgrade_thread
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Upgrade check (tsan)
          REPO_COPY=${{runner.temp}}/upgrade_thread/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Upgrade check
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 upgrade_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UpgradeCheckMsan:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/upgrade_memory
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Upgrade check (msan)
          REPO_COPY=${{runner.temp}}/upgrade_memory/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Upgrade check
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 upgrade_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UpgradeCheckDebug:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, stress-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/upgrade_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Upgrade check (debug)
          REPO_COPY=${{runner.temp}}/upgrade_debug/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Upgrade check
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 upgrade_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
##############################################################################################
##################################### AST FUZZERS ############################################
##############################################################################################
  ASTFuzzerTestAsan:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, fuzzer-unit-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/ast_fuzzer_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=AST fuzzer (asan)
          REPO_COPY=${{runner.temp}}/ast_fuzzer_asan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Fuzzer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 ast_fuzzer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ASTFuzzerTestTsan:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, fuzzer-unit-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/ast_fuzzer_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=AST fuzzer (tsan)
          REPO_COPY=${{runner.temp}}/ast_fuzzer_tsan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Fuzzer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 ast_fuzzer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ASTFuzzerTestUBSan:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, fuzzer-unit-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/ast_fuzzer_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=AST fuzzer (ubsan)
          REPO_COPY=${{runner.temp}}/ast_fuzzer_ubsan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Fuzzer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 ast_fuzzer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ASTFuzzerTestMSan:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, fuzzer-unit-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/ast_fuzzer_msan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=AST fuzzer (msan)
          REPO_COPY=${{runner.temp}}/ast_fuzzer_msan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Fuzzer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 ast_fuzzer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ASTFuzzerTestDebug:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, fuzzer-unit-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/ast_fuzzer_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=AST fuzzer (debug)
          REPO_COPY=${{runner.temp}}/ast_fuzzer_debug/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Fuzzer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 ast_fuzzer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  #############################################################################################
  ############################# INTEGRATION TESTS #############################################
  #############################################################################################
  IntegrationTestsAsan0:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsAsan1:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsAsan2:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsAsan3:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsAsan4:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsAsan5:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan/ClickHouse
          RUN_BY_HASH_NUM=5
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan0:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan1:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan2:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan3:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan4:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=4
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsTsan5:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (tsan)
          REPO_COPY=${{runner.temp}}/integration_tests_tsan/ClickHouse
          RUN_BY_HASH_NUM=5
          RUN_BY_HASH_TOTAL=6
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease0:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=0
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease1:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=1
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease2:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=2
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsRelease3:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests (release)
          REPO_COPY=${{runner.temp}}/integration_tests_release/ClickHouse
          RUN_BY_HASH_NUM=3
          RUN_BY_HASH_TOTAL=4
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  IntegrationTestsFlakyCheck:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/integration_tests_asan_flaky_check
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Integration tests flaky check (asan)
          REPO_COPY=${{runner.temp}}/integration_tests_asan_flaky_check/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Integration test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 integration_test_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
#############################################################################################
##################################### REGRESSION TESTS ######################################
#############################################################################################
  RegressionCommonAmd64:
    strategy:
      fail-fast: false
      matrix:
        SUITE: [aes_encryption, aggregate_functions, atomic_insert, base_58, clickhouse_keeper, data_types, datetime64_extended_range, disk_level_encryption, dns, example, extended_precision_data_types, kafka, kerberos, key_value, lightweight_delete, part_moves_between_shards, rbac, selects, session_timezone, ssl_server, tiered_storage, window_functions]
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=${{ matrix.SUITE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionCommonAarch64:
    strategy:
      fail-fast: false
      matrix:
        SUITE: [aes_encryption, aggregate_functions, atomic_insert, base_58, clickhouse_keeper, data_types, datetime64_extended_range, disk_level_encryption, dns, engines, example, extended_precision_data_types, kafka, kerberos, key_value, lightweight_delete, part_moves_between_shards, rbac, selects, session_timezone, ssl_server, tiered_storage, window_functions]
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_ARM_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=${{ matrix.SUITE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionBenchmarkAmd64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, aws_s3, gcs]
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=ontime_benchmark
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/benchmark.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --storage ${{ matrix.STORAGE }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --aws-s3-bucket ${{ secrets.REGRESSION_AWS_S3_BUCKET }}
              --aws-s3-region ${{ secrets.REGRESSION_AWS_S3_REGION }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-${{ matrix.STORAGE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionBenchmarkAarch64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, aws_s3, gcs]
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_ARM_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=ontime_benchmark
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/benchmark.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --storage ${{ matrix.STORAGE }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --aws-s3-bucket ${{ secrets.REGRESSION_AWS_S3_BUCKET }}
              --aws-s3-region ${{ secrets.REGRESSION_AWS_S3_REGION }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-${{ matrix.STORAGE }}-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionClickHouseKeeperSSLAmd64:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_COMMON_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=clickhouse_keeper
          STORAGE=/ssl
          artifacts=builds
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --ssl
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="${GITHUB_ACTOR}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-ssl-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionClickHouseKeeperSSLAarch64:
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_COMMON_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=clickhouse_keeper
          STORAGE=/ssl
          artifacts=builds
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --ssl
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="${GITHUB_ACTOR}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-ssl-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionLDAPAmd64:
    strategy:
      fail-fast: false
      matrix:
        SUITE: [authentication, external_user_directory, role_mapping]
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=ldap/${{ matrix.SUITE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ldap-${{ matrix.SUITE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionLDAPAarch64:
    strategy:
      fail-fast: false
      matrix:
        SUITE: [authentication, external_user_directory, role_mapping]
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_ARM_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=ldap/${{ matrix.SUITE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ldap-${{ matrix.SUITE }}-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionParquetAmd64:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_COMMON_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=parquet
          STORAGE=/no_s3
          artifacts=builds
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="${GITHUB_ACTOR}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)"
              --log raw.log
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionParquetAWSAmd64:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_COMMON_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=parquet
          STORAGE=/aws_s3
          artifacts=builds
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="${GITHUB_ACTOR}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)"
              --log raw.log
              --storage aws_s3
              --aws-s3-bucket ${{ secrets.REGRESSION_AWS_S3_BUCKET }}
              --aws-s3-region ${{ secrets.REGRESSION_AWS_S3_REGION }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-aws-s3-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionParquetMinioAmd64:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_COMMON_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=parquet
          STORAGE=/minio
          artifacts=builds
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="${GITHUB_REPOSITORY}" project.id="${GITHUB_REPOSITORY_ID}" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="${GITHUB_ACTOR}" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="${GITHUB_RUN_ID}" job.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" arch="$(uname -i)"
              --log raw.log
              --storage minio
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-minio-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionS3Amd64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, aws_s3, gcs]
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=s3
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
              --storage ${{ matrix.STORAGE }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --aws-s3-bucket ${{ secrets.REGRESSION_AWS_S3_BUCKET }}
              --aws-s3-region ${{ secrets.REGRESSION_AWS_S3_REGION }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-${{ matrix.STORAGE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionS3Aarch64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, aws_s3, gcs]
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_ARM_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=s3
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
              --storage ${{ matrix.STORAGE }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --aws-s3-bucket ${{ secrets.REGRESSION_AWS_S3_BUCKET }}
              --aws-s3-region ${{ secrets.REGRESSION_AWS_S3_REGION }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-${{ matrix.STORAGE }}-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionTieredStorageS3Amd64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, s3amazon, s3gcs]
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cpx51, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=tiered_storage
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-uri https://s3.${{ secrets.REGRESSION_AWS_S3_REGION}}.amazonaws.com/${{ secrets.REGRESSION_AWS_S3_BUCKET }}/data/
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --with-${{ matrix.STORAGE }}
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-${{ matrix.STORAGE }}-amd64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  RegressionTieredStorageS3Aarch64:
    strategy:
      fail-fast: false
      matrix:
        STORAGE: [minio, s3amazon, s3gcs]
    needs: [BuilderDebAarch64]
    runs-on: [altinity-self-hosted, regression-tester, on-demand, type-cax41, in-fsn1, image-arm-app-docker-ce]
    timeout-minutes: 180
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_REPORT_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_REPORT_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REPORT_REGION }}
    steps:
      - name: Checkout regression repo
        uses: actions/checkout@v3
        with:
          repository: Altinity/clickhouse-regression
          ref: ${{ env.REGRESSION_ARM_COMMIT }}
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          REPORTS_PATH=${{runner.temp}}/reports_dir
          SUITE=tiered_storage
          STORAGE=/${{ matrix.STORAGE }}
          artifacts=public
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Setup
        run: .github/setup.sh
      - name: Get deb url
        run: python3 .github/get-deb-url.py --reports-path ${{ env.REPORTS_PATH }} --github-env $GITHUB_ENV
      - name: Run ${{ env.SUITE }} suite
        run: python3
              -u ${{ env.SUITE }}/regression.py
              --clickhouse-binary-path ${{ env.clickhouse_binary_path }}
              --test-to-end
              --local
              --collect-service-logs
              --output classic
              --parallel 1
              --attr project="$GITHUB_REPOSITORY" project.id="$GITHUB_REPOSITORY_ID" package="${{ env.clickhouse_binary_path }}" version="${{ env.version }}" user.name="$GITHUB_ACTOR" repository="https://github.com/Altinity/clickhouse-regression" commit.hash="$(git rev-parse HEAD)" job.id="$GITHUB_RUN_ID" job.url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" arch="$(uname -i)"
              --log raw.log
              --aws-s3-access-key ${{ secrets.REGRESSION_AWS_S3_SECRET_ACCESS_KEY }}
              --aws-s3-key-id ${{ secrets.REGRESSION_AWS_S3_KEY_ID }}
              --aws-s3-uri https://s3.${{ secrets.REGRESSION_AWS_S3_REGION}}.amazonaws.com/${{ secrets.REGRESSION_AWS_S3_BUCKET }}/data/
              --gcs-key-id ${{ secrets.REGRESSION_GCS_KEY_ID }}
              --gcs-key-secret ${{ secrets.REGRESSION_GCS_KEY_SECRET }}
              --gcs-uri ${{ secrets.REGRESSION_GCS_URI }}
              --with-${{ matrix.STORAGE }}
      - name: Create and upload logs
        if: always()
        run: .github/create_and_upload_logs.sh 1
        env:
          artifact_s3_dir: build/v${{ env.version }}/$GITHUB_SHA
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.SUITE }}-${{ matrix.STORAGE }}-aarch64-artifacts
          path: |
            ./report.html
            ./*.log.txt
            ./*.log
            ./*.html
            ./*/_instances/*.log
            ./*/_instances/*/logs/*.log
            ./*/*/_instances/*/logs/*.log
            ./*/*/_instances/*.log

  SignRelease:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    timeout-minutes: 180
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/signed
          REPORTS_PATH=${{runner.temp}}/reports_dir
          EOF
      - name: Clear repository
        run: |
          sudo rm -fr "$GITHUB_WORKSPACE" && mkdir "$GITHUB_WORKSPACE"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Download json reports
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Sign release
        env:
          GPG_BINARY_SIGNING_KEY: ${{ secrets.GPG_BINARY_SIGNING_KEY }}
          GPG_BINARY_SIGNING_PASSPHRASE: ${{ secrets.GPG_BINARY_SIGNING_PASSPHRASE }}
          REPORTS_PATH: ${{ env.REPORTS_PATH }}
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 sign_release.py
      - name: Upload signed hashes
        uses: actions/upload-artifact@v2
        with:
          name: signed-hashes
          path: ${{ env.TEMP_PATH }}/*.gpg
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  #############################################################################################
  #################################### UNIT TESTS #############################################
  #############################################################################################
  UnitTestsAsan:
    needs: [BuilderDebAsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/unit_tests_asan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Unit tests (asan)
          REPO_COPY=${{runner.temp}}/unit_tests_asan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Unit test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 unit_tests_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UnitTestsTsan:
    needs: [BuilderDebTsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/unit_tests_tsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Unit tests (tsan)
          REPO_COPY=${{runner.temp}}/unit_tests_tsan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Unit test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 unit_tests_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UnitTestsMsan:
    needs: [BuilderDebMsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/unit_tests_msan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Unit tests (msan)
          REPO_COPY=${{runner.temp}}/unit_tests_msan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Unit test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 unit_tests_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  UnitTestsUBsan:
    needs: [BuilderDebUBsan]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/unit_tests_ubsan
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=Unit tests (ubsan)
          REPO_COPY=${{runner.temp}}/unit_tests_ubsan/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Unit test
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 unit_tests_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ##############################################################################################
  ###################################### SQLANCER FUZZERS ######################################
  ##############################################################################################
  SQLancerTestRelease:
    needs: [BuilderDebRelease]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/sqlancer_release
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=SQLancer (release)
          REPO_COPY=${{runner.temp}}/sqlancer_release/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: SQLancer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 sqlancer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  SQLancerTestDebug:
    needs: [BuilderDebDebug]
    runs-on: [altinity-self-hosted, on-demand, type-cpx41, in-ash, image-x86-app-docker-ce]
    steps:
      - name: Set envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          TEMP_PATH=${{runner.temp}}/sqlancer_debug
          REPORTS_PATH=${{runner.temp}}/reports_dir
          CHECK_NAME=SQLancer (debug)
          REPO_COPY=${{runner.temp}}/sqlancer_debug/ClickHouse
          EOF
      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: SQLancer
        run: |
          sudo rm -fr "$TEMP_PATH"
          mkdir -p "$TEMP_PATH"
          cp -r "$GITHUB_WORKSPACE" "$TEMP_PATH"
          cd "$REPO_COPY/tests/ci"
          python3 sqlancer_check.py "$CHECK_NAME"
      - name: Cleanup
        if: always()
        run: |
          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
          sudo rm -fr "$TEMP_PATH"
  ###########################################################################################
  ################################ FINISH CHECK #############################################
  ###########################################################################################
  FinishCheck:
    needs:
      - DockerHubPush
      - DockerServerImages
      - BuilderReport
      - MarkReleaseReady
      - FunctionalStatelessTestDebug0
      - FunctionalStatelessTestDebug1
      - FunctionalStatelessTestDebug2
      - FunctionalStatelessTestDebug3
      - FunctionalStatelessTestDebug4
      - FunctionalStatelessTestRelease
      - FunctionalStatelessTestReleaseDatabaseReplicated0
      - FunctionalStatelessTestReleaseDatabaseReplicated1
      - FunctionalStatelessTestReleaseDatabaseReplicated2
      - FunctionalStatelessTestReleaseDatabaseReplicated3
      - FunctionalStatelessTestReleaseWideParts
      - FunctionalStatelessTestAarch64
      - FunctionalStatelessTestAsan0
      - FunctionalStatelessTestAsan1
      - FunctionalStatelessTestAsan2
      - FunctionalStatelessTestAsan3
      - FunctionalStatelessTestTsan0
      - FunctionalStatelessTestTsan1
      - FunctionalStatelessTestTsan2
      - FunctionalStatelessTestTsan3
      - FunctionalStatelessTestTsan4
      - FunctionalStatelessTestMsan0
      - FunctionalStatelessTestMsan1
      - FunctionalStatelessTestMsan2
      - FunctionalStatelessTestMsan3
      - FunctionalStatelessTestMsan4
      - FunctionalStatelessTestMsan5
      - FunctionalStatelessTestUBsan0
      - FunctionalStatelessTestUBsan1
      - FunctionalStatefulTestDebug
      - FunctionalStatefulTestRelease
      - FunctionalStatefulTestAarch64
      - FunctionalStatefulTestAsan
      - FunctionalStatefulTestTsan
      - FunctionalStatefulTestMsan
      - FunctionalStatefulTestUBsan
      - FunctionalStatelessTestReleaseS3_0
      - FunctionalStatelessTestReleaseS3_1
      - FunctionalStatelessTestS3Debug0
      - FunctionalStatelessTestS3Debug1
      - FunctionalStatelessTestS3Debug2
      - FunctionalStatelessTestS3Debug4
      - FunctionalStatelessTestS3Debug5
      - FunctionalStatelessTestS3Tsan0
      - FunctionalStatelessTestS3Tsan1
      - FunctionalStatelessTestS3Tsan2
      - FunctionalStatelessTestS3Tsan4
      - StressTestDebug
      - StressTestAsan
      - StressTestTsan
      - StressTestMsan
      - StressTestUBsan
      - UpgradeCheckAsan
      - UpgradeCheckTsan
      - UpgradeCheckMsan
      - UpgradeCheckDebug
      - IntegrationTestsAsan0
      - IntegrationTestsAsan1
      - IntegrationTestsAsan2
      - IntegrationTestsAsan3
      - IntegrationTestsAsan4
      - IntegrationTestsAsan5
      - IntegrationTestsRelease0
      - IntegrationTestsRelease1
      - IntegrationTestsRelease2
      - IntegrationTestsRelease3
      - IntegrationTestsTsan0
      - IntegrationTestsTsan1
      - IntegrationTestsTsan2
      - IntegrationTestsTsan3
      - IntegrationTestsTsan4
      - IntegrationTestsTsan5
      - ASTFuzzerTestDebug
      - ASTFuzzerTestAsan
      - ASTFuzzerTestTsan
      - ASTFuzzerTestMSan
      - ASTFuzzerTestUBSan
      - IntegrationTestsAsan0
      - IntegrationTestsAsan1
      - IntegrationTestsAsan2
      - IntegrationTestsRelease0
      - IntegrationTestsRelease1
      - IntegrationTestsTsan0
      - IntegrationTestsTsan1
      - IntegrationTestsTsan2
      - IntegrationTestsTsan3
      - CompatibilityCheckX86
      - CompatibilityCheckAarch64
      - RegressionCommonAmd64
      - RegressionCommonAarch64
      - RegressionBenchmarkAmd64
      - RegressionBenchmarkAarch64
      - RegressionClickHouseKeeperSSLAmd64
      - RegressionClickHouseKeeperSSLAarch64
      - RegressionLDAPAmd64
      - RegressionLDAPAarch64
      - RegressionParquetAmd64
      - RegressionParquetAWSAmd64
      - RegressionParquetMinioAmd64
      - RegressionS3Amd64
      - RegressionS3Aarch64
      - RegressionTieredStorageS3Amd64
      - RegressionTieredStorageS3Aarch64
      - UnitTestsAsan
      - UnitTestsTsan
      - UnitTestsMsan
      - UnitTestsUBsan
      - SignRelease
      - SQLancerTestRelease
      - SQLancerTestDebug
    runs-on: [altinity-self-hosted, finish-checker, on-demand, type-cpx31, in-fsn1, image-x86-app-docker-ce]
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@34c90ad008fe1469182f3637d3de4766aa10a5c7
        with:
          clear-repository: true
      - name: Finish label
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 finish_check.py
