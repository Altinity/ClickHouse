### For the pure soul wishes to move it to another place
# https://github.com/orgs/community/discussions/9050

name: Testing workflow
'on':
  workflow_call:
    inputs:
      test_name:
        description: the value of test type from tests/ci/ci_config.py, ends up as $CHECK_NAME ENV
        required: true
        type: string
      runner_type:
        description: the label of runner to use, can be a simple string or a comma-separated list
        required: true
        type: string
      timeout_minutes:
        description: Maximum number of minutes to let workflow run before GitHub cancels it.
        default: 120
        type: number
      run_command:
        description: the command to launch the check. Usually starts with `cd '$REPO_COPY/tests/ci'`
        required: true
        type: string
      batches:
        description: how many batches for the test will be launched
        default: 1
        type: number
      checkout_depth:
        description: the value of the git shallow checkout
        required: false
        type: number
        default: 1
      submodules:
        description: if the submodules should be checked out
        required: false
        type: boolean
        default: false
      additional_envs:
        description: additional ENV variables to setup the job
        type: string
    secrets:
      secret_envs:
        description: if given, it's passed to the environments
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: the access key to the aws param store.
        required: true
      AWS_ACCESS_KEY_ID:
        description: the access key id to the aws param store.
        required: true
      AWS_DEFAULT_REGION:
        description: the region of the aws param store.
        required: true
      DOCKER_USERNAME:
        description: username of the docker user.
        required: true
      DOCKER_PASSWORD:
        description: password to the docker user.
        required: true

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1
  CHECK_NAME: ${{inputs.test_name}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  runner_labels_setup:
    name: Compute proper runner labels for the rest of the jobs
    runs-on: ubuntu-latest
    outputs:
      runner_labels: ${{ steps.setVariables.outputs.runner_labels }}
    steps:
      - id: setVariables
        name: Prepare runner_labels variables for the later steps
        run: |

          # Prepend self-hosted
          input="self-hosted, ${input}"

          # Remove all whitespace
          input="$(echo ${input} | tr -d [:space:])"
          # Make something like a JSON array from comma-separated list
          input="[ '${input//\,/\'\, \'}' ]"

          echo "runner_labels=$input" >> ${GITHUB_OUTPUT}
        env:
          input: ${{ inputs.runner_type }}

  PrepareStrategy:
    # batches < 1 is misconfiguration,
    # and we need this step only for batches > 1
    if: ${{ inputs.batches > 1 }}
    runs-on: ubuntu-latest #TODO(vnemkov): NO need for a beefy custom runner for a simple script
    #runs-on: [self-hosted, style-checker-aarch64]
    outputs:
      batches: ${{steps.batches.outputs.batches}}
    steps:
      - name: Calculate batches
        id: batches
        run: |
          batches_output=$(python3 -c 'import json; print(json.dumps(list(range(${{inputs.batches}}))))')
          echo "batches=${batches_output}" >> "$GITHUB_OUTPUT"
  Test:
    # If PrepareStrategy is skipped for batches == 1,
    # we still need to launch the test.
    # `! failure()` is mandatory here to launch on skipped Job
    # `&& !cancelled()` to allow the be cancelable
    if: ${{ ( !failure() && !cancelled() ) && inputs.batches > 0 }}
    # Do not add `-0` to the end, if there's only one batch
    name: ${{inputs.test_name}}${{ inputs.batches > 1 && format('-{0}',matrix.batch) || '' }}
    env:
      GITHUB_JOB_OVERRIDDEN: ${{inputs.test_name}}${{ inputs.batches > 1 && format('-{0}',matrix.batch) || '' }}

    needs: [PrepareStrategy, runner_labels_setup]
    runs-on: ${{ fromJson(needs.runner_labels_setup.outputs.runner_labels) }}

    timeout-minutes: ${{inputs.timeout_minutes}}
    strategy:
      fail-fast: false  # we always wait for entire matrix
      matrix:
        # if PrepareStrategy does not have batches, we use 0
        batch: ${{ needs.PrepareStrategy.outputs.batches
          && fromJson(needs.PrepareStrategy.outputs.batches)
          || fromJson('[0]')}}
    steps:
      - name: Debug input runer tag names
        run: |
          cat <<JSON
          inputs: ${{toJson(inputs)   }}
          JSON

      - name: Check out repository code
        uses: Altinity/checkout@19599efdf36c4f3f30eb55d5bb388896faea69f6
        with:
          clear-repository: true
          submodules: ${{inputs.submodules}}
          fetch-depth: ${{inputs.checkout_depth}}
          filter: tree:0

      - name: Set build envs
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          ${{inputs.additional_envs}}
          ${{secrets.secret_envs}}
          EOF

      - name: Common setup
        uses: ./.github/actions/common_setup
        with:
          job_type: test

      - name: Download json reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.REPORTS_PATH }}

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        secrets: inherit

      - name: Setup batch
        if: ${{ inputs.batches > 1}}
        run: |
          cat >> "$GITHUB_ENV" << 'EOF'
          RUN_BY_HASH_NUM=${{matrix.batch}}
          RUN_BY_HASH_TOTAL=${{inputs.batches}}
          EOF

      - name: Run test
        run: ${{inputs.run_command}}

      - name: Clean
        if: always()
        uses: ./.github/actions/clean
